//Convierte Celsius a Fahrenheit
function convertCtoF(celsius) {
  let fahrenheit;
  return fahrenheit=(celsius*9/5)+32;
}
convertCtoF(30);
//---------------------------------------------------
//Invierte una cadena
function reverseString(str) {
  return str.split("").reverse().join("");
}
reverseString("hello");
//-----------------------------------------------------

//Factoriza un número
function factorialize(num) {
  var total = 1; 
	for (let i=1; i<=num; i++) {
		total = total * i; 
	}  
  return total;
}
factorialize(5);
//---------------------------------

//****Encuentra la palabra más larga en una cadena*************************
function findLongestWordLength(str) {
  return str.split(' ').reduce((longest, word) => Math.max(longest, word.length), 0);
}
findLongestWordLength("The quick brown fox jumped over the lazy dog");
//otra forma:
function findLongestWordLength(str) {
  return Math.max(...str.split(" ").map(word => word.length));
}
//***********************************************************

//********Devuelve los números mayores en los arreglos***************
function largestOfFour(arr) {
  const newArr = [];
  for (let i = 0; i < arr.length; i++) {
    let mayor = arr[i][0];//reiniciando el mayor por cada pase.
    for (let j = 1; j < arr[i].length; j++) {
      if (arr[i][j] > mayor) {
        mayor = arr[i][j]; 
      }
    }
    newArr[i] = mayor;
  }

  return newArr;
}
  
largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);
//**************************************************
//*********Evalúa si una cadena (primer argumento, str) termina con la cadena de destino dada (segundo argumento, target).
function confirmEnding(str, target) {
  return str.slice(str.length - target.length) === target;
}
confirmEnding("Bastian", "n");
//********************************************
//**********repite la misma cadena dada la cantidad****************
function repeatStringNumTimes(str, num) {
  let concatena = "";

  for (let i = 0; i < num; i++) {
    concatena += str;
  }

  return concatena;
  
}

repeatStringNumTimes("abc", 3);
//*************************************
//encuentra en un arreglo
function findElement(arr, func) {
  return arr.find(func);
}
//***********************************
//Funcion que lleva a Mayusculas las iniciales de cada palabra en la cadena.
function titleCase(str) {
  const newTitle = str.split(" ");
  const updatedTitle = [];
  for (let st in newTitle) {
    updatedTitle[st] = newTitle[st][0].toUpperCase() + newTitle[st].slice(1).toLowerCase();
  }
  return updatedTitle.join(" ");
}

//otra forma
function titleCase(str) {
  return str
    .toLowerCase()
    .split(" ")
    .map(val => val.replace(val.charAt(0), val.charAt(0).toUpperCase()))
    .join(" ");
}

titleCase("I'm a little tea pot");// esto devuelve: I'm A Little Tea Pot
//********************************************************
//***********Slice and Splice/Cortar y revanar/////*********************/
function frankenSplice(arr1, arr2, n) {
  let localArr = arr2.slice();
  localArr.splice(n, 0, ...arr1);
  return localArr;
}

//otra forma
function frankenSplice(arr1, arr2, n) {
  // It's alive. It's alive!
  let localArray = arr2.slice();
  for (let i = 0; i < arr1.length; i++) {
    localArray.splice(n, 0, arr1[i]);
    n++;
  }
  return localArray;
}

frankenSplice([1, 2, 3], [4, 5, 6], 1);// esto devuelve [ 4, 1, 2, 3, 5, 6 ]
//*******************************************************
//devuelve lo verdadero de un arreglo en otro arreglo
function bouncer(arr) {
  return arr.filter(Boolean);
}
bouncer([7, "ate", "", false, 9]);
console.log(bouncer([7, "ate", "", false, 9]));//esto es lo que devuelve.
//*****************************************************************************

function getIndexToIns(arr, num) {
  arr.sort((a, b) => a - b);

  for (let i = 0; i < arr.length; i++) {
    if (arr[i] >= num) return i;
  }

  return arr.length;
}
getIndexToIns([40, 60], 50);
//************************************************************
function mutation(arr) {
  const test = arr[1].toLowerCase();
  const target = arr[0].toLowerCase();
  for (let i = 0; i < test.length; i++) {
    if (target.indexOf(test[i]) < 0) return false;
  }
  return true;
}

mutation(["hello", "hey"]);
//***********************************************************
//Escribe una función que divida un arreglo (primer argumento) en grupos de la longitud size (segundo argumento) y los devuelva como un arreglo bidimensional.
function chunkArrayInGroups(arr, size) {
  let temp = [];
  const result = [];

  for (let a = 0; a < arr.length; a++) {
    if (a % size !== size - 1) temp.push(arr[a]);
    else {
      temp.push(arr[a]);
      result.push(temp);
      temp = [];
    }
  }

  if (temp.length !== 0) result.push(temp);
  return result;
}
//otra forma:
function chunkArrayInGroups(arr, size) {
  // Break it up.
  const newArr = [];
  for (let i = 0; i < arr.length; i += size) {
    newArr.push(arr.slice(i, i + size));
  }
  return newArr;
}
//otra forma
function chunkArrayInGroups(arr, size) {
  const newArr = [];
  while (arr.length > 0) {
    newArr.push(arr.splice(0, size));
  }
  return newArr;
}
//otra forma:
function chunkArrayInGroups(arr, size) {
  if (arr.length <= size) {
    return [arr];
  } else {
    return [arr.slice(0, size)].concat(
      chunkArrayInGroups(arr.slice(size), size)
    );
  }
}

chunkArrayInGroups(["a", "b", "c", "d"], 2);

